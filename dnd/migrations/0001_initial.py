# Generated by Django 5.0 on 2023-12-05 12:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='ItemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Тип предмета')),
            ],
            options={
                'verbose_name': 'Тип предмета',
                'verbose_name_plural': 'Типы предметов',
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Раса')),
                ('allowed_weight', models.PositiveIntegerField(verbose_name='Допустимый вес')),
                ('characteristics', models.TextField(blank=True, null=True, verbose_name='Особенности')),
                ('history', models.TextField(blank=True, null=True, verbose_name='История расы')),
            ],
            options={
                'verbose_name': 'Раса',
                'verbose_name_plural': 'Расы',
            },
        ),
        migrations.CreateModel(
            name='AdvUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, verbose_name='Биография')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='media/user_avatars/', verbose_name='Аватвар')),
                ('favorite_race', models.CharField(blank=True, max_length=50, null=True, verbose_name='Любимая раса')),
                ('favorite_class', models.CharField(blank=True, max_length=50, null=True, verbose_name='Любимый класс')),
                ('experience_level', models.CharField(choices=[('beginner', 'Новичок'), ('intermediate', 'Средний'), ('advanced', 'Опытный'), ('expert', 'Эксперт')], default='beginner', max_length=50, verbose_name='Уровень опыта')),
                ('is_dm', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('abstractitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnd.abstractitem')),
                ('material', models.CharField(blank=True, max_length=50, null=True, verbose_name='Материал')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Вес')),
                ('armor_type', models.CharField(choices=[('HEAVY', 'Тяжелый'), ('MEDIUM', 'Средний'), ('LIGHT', 'Легкий'), ('SHIELD', 'Щит')], default='LIGHT', max_length=50, verbose_name='Тип доспеха')),
                ('defense', models.PositiveIntegerField(blank=True, null=True, verbose_name='Защита')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('dnd.abstractitem', models.Model),
        ),
        migrations.CreateModel(
            name='Consumable',
            fields=[
                ('abstractitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnd.abstractitem')),
                ('effect_type', models.CharField(choices=[('HEAL', 'Лечение'), ('BUFF', 'Усиление'), ('DEBUFF', 'Ослабление'), ('OTHER', 'Другое')], default='OTHER', max_length=50, verbose_name='Тип эффекта')),
                ('effect_strength', models.PositiveIntegerField(blank=True, null=True, verbose_name='Сила эффекта')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Продолжительность действия')),
            ],
            options={
                'verbose_name_plural': 'Расходники',
            },
            bases=('dnd.abstractitem',),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('abstractitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnd.abstractitem')),
                ('material', models.CharField(blank=True, max_length=50, null=True, verbose_name='Материал')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Вес')),
                ('weapon_type', models.CharField(choices=[('MELEE', 'Ближний бой'), ('RANGED', 'Дальний бой'), ('MAGIC', 'Магическое'), ('OTHER', 'Другое')], default='OTHER', max_length=50, verbose_name='Тип оружия')),
                ('damage', models.PositiveIntegerField(blank=True, null=True, verbose_name='Урон')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('dnd.abstractitem', models.Model),
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('character_class', models.CharField(max_length=50, verbose_name='Класс')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='Уровень персонажа')),
                ('image', models.ImageField(blank=True, null=True, upload_to='media/character_images', verbose_name='Фото персонажа')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.race', verbose_name='Раса')),
            ],
            options={
                'verbose_name': 'Персонаж',
                'verbose_name_plural': 'Персонажи',
            },
        ),
        migrations.AddField(
            model_name='abstractitem',
            name='characters',
            field=models.ManyToManyField(related_name='items', to='dnd.character', verbose_name='Персонажи'),
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('amount', models.PositiveIntegerField(default=0, verbose_name='Количество')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='currencies', to='dnd.character')),
            ],
            options={
                'verbose_name': 'Валюта',
                'verbose_name_plural': 'Валюты',
            },
        ),
        migrations.AddField(
            model_name='abstractitem',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.itemtype', verbose_name='Тип предмета'),
        ),
        migrations.CreateModel(
            name='ItemAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, verbose_name='Ключ атрибута')),
                ('value', models.CharField(max_length=250, verbose_name='Значение атрибута')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.abstractitem')),
            ],
            options={
                'unique_together': {('item', 'key')},
            },
        ),
    ]
